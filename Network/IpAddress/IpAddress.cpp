
///////////////////////////////////////
// Headers			    			 //
///////////////////////////////////////
									 //
#include "IpAddress.h"				 //
									 //
#include "../Config/Config.h"	     //
									 //
///////////////////////////////////////


namespace net
{
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Static member data																		//
	//////////////////////////////////////////////////////////////////////////////////////////////

	const IpAddress IpAddress::None;
	const IpAddress IpAddress::Any(0, 0, 0, 0);
	const IpAddress IpAddress::LocalHost(127, 0, 0, 1);
	const IpAddress IpAddress::Broadcast(255, 255, 255, 255);


	//////////////////////////////////////////////////////////////////////////////////////////////
	// Constructors 																		    //
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::IpAddress():														   //
	address(0),
	valid(false)
	{

	}
	

	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::IpAddress(const std::string address):					           //
	address(0),
	valid(false)
	{
		convert(address);
	}


	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::IpAddress(LPCSTR address):										   //
	address(0),
	valid(false)
	{
		convert(address);
	}
	

	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::IpAddress(UINT8 byte_1, UINT8 byte_2, UINT8 byte_3, UINT8 byte_4):  //
	address((byte_1 << 24) | (byte_2 << 16) | (byte_3 << 8) | byte_4),
	valid(true)
	{

	}


	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::IpAddress(const UINT32 address):								 	   //
	address(address),
	valid(true)
	{

	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Private method																		    //
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////
	void IpAddress::convert(const std::string address)							   //
	{
		UINT32 _ip_addr = ntohl(inet_addr(address.c_str()));
		
		if (_ip_addr != INADDR_NONE)
		{
			valid = true;
			this -> address = _ip_addr;
		}
	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Methods																				    //
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	std::string IpAddress::ToString() const										   //
	{
		in_addr _in_addr;
		_in_addr.s_addr = ntohl(address);

		return inet_ntoa(_in_addr);
	}


	/////////////////////////////////////////////////////////////////////////////////
	UINT32 IpAddress::ToInteger() const											   //
	{
		return ntohl(address);
	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Static method																		    //
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	IpAddress IpAddress::GetLocalAddress()										   //
	{
		char buf[BUF_SIZE];
		in_addr	  _in_addr;
		hostent*	 _host;

		gethostname(buf, sizeof(buf));
		_host = gethostbyname(buf);

		memcpy(&_in_addr, _host -> h_addr_list[NULL], sizeof(in_addr));
		
		return IpAddress(ntohl(_in_addr.s_addr));
	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Overloading operator																		//
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	IpAddress::operator bool() const											   //
	{
		return (*this != None);
	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Overloading a friendly operator															//
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	bool operator <(const IpAddress left, const IpAddress right)				   //
	{
		return std::make_pair(left.valid, left.address) < std::make_pair(right.valid, right.address);
	}



	/////////////////////////////////////////////////////////////////////////////////
	// Global operator overloading                       	  	 				   //
	/////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	bool operator ==(const IpAddress left, const IpAddress right)				   //
	{
		return !(left < right) && !(right < left);
	}

	
	/////////////////////////////////////////////////////////////////////////////////
	bool operator !=(const IpAddress left, const IpAddress right)				   //
	{
		return !(left == right);
	}


	/////////////////////////////////////////////////////////////////////////////////	
	bool operator >(const IpAddress left, const IpAddress right)				   //
	{
		return right < left;
	}


	/////////////////////////////////////////////////////////////////////////////////	
	bool operator <=(const IpAddress left, const IpAddress right)				   //
	{
		return !(right < left);
	}

	
	/////////////////////////////////////////////////////////////////////////////////	
	bool operator >=(const IpAddress left, const IpAddress right)				   //
	{
		return !(left < right);
	}

	
	/////////////////////////////////////////////////////////////////////////////////	
	std::istream& operator >>(std::istream& stream, IpAddress& address)		  	   //
	{
		std::string _string;
		stream >> _string;
		address = IpAddress(_string);

		return stream;
	}


	/////////////////////////////////////////////////////////////////////////////////	
	std::ostream& operator <<(std::ostream& stream, const IpAddress& address)	   //
	{
		return stream << address.ToString();
	}

} // namespace net
	