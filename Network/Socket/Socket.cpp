
//////////////////////////////////////////
// Headers			    				//
//////////////////////////////////////////
										//
#include "Socket.h"						//
										//
//////////////////////////////////////////


namespace net
{
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Constructor																			    //
	//////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////
	Socket::Socket():															   //
	socket_core(NULL)
	{
	
	}



	//////////////////////////////////////////////////////////////////////////////////////////////
	// Protected methods																	    //
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////////
	SOCKADDR_IN Socket::CreateSockAddrIn(const IpAddress address, const UINT16 port)  //
	{
		SOCKADDR_IN _addr_in;
		_addr_in.sin_addr.s_addr = address.ToInteger();
		_addr_in.sin_port = htons(port);
		_addr_in.sin_family = AF_INET;
		
		return _addr_in;
	}


	bool Socket::IsDisconnected()
	{
		if (socket_core == INVALID_SOCKET)
			return true;

		return false;
	}


	/////////////////////////////////////////////////////////////////////////////////
	void Socket::Close()														   //
	{
		if (socket_core != INVALID_SOCKET)
		{
			closesocket(socket_core);
			socket_core = INVALID_SOCKET;
		}
	}

} // namespace net