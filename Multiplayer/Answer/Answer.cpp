
/////////////////////////////////////////
// Headers			    			   //
/////////////////////////////////////////
									   //
#include "Answer.h"				       //
									   //
/////////////////////////////////////////


namespace mp
{
    //////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors  																		    //
    //////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////
    Answer::Answer()                                                                   //
    {
    
    }


    /////////////////////////////////////////////////////////////////////////////////////
    Answer::Answer(Type type):                                                         //
    type(type)
    {
    
    }


    /////////////////////////////////////////////////////////////////////////////////////
    Answer::Answer(std::string error_message):                                         //
    type(Error),
    error_message(error_message)
    {
    
    }



    //////////////////////////////////////////////////////////////////////////////////////////////
    // Method   	  																		    //
    //////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////
    void Answer::Clear()                                                               //
    {
        type = None;
        error_message.clear();
    }



    //////////////////////////////////////////////////////////////////////////////////////////////
    // Global operator overloading  														    //
    //////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////
    Message& operator <<(Message& message, Answer answer)                              //
    {
        message.packet << answer.type;

        if (answer.type == Answer::Error)
            message.packet << answer.error_message;

        return message;
    }


    /////////////////////////////////////////////////////////////////////////////////////
    Message& operator >>(Message& message, Answer& answer)                             //
    {
        UINT32 _answer_type;
        message.packet >> _answer_type;
        answer.type = static_cast<Answer::Type>(_answer_type);

        if (answer.type == Answer::Error)
            message.packet >> answer.error_message;

        return message;
    }

} // namespace mp